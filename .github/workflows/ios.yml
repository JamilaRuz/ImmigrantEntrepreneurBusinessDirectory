name: iOS CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-testflight:
    name: Build and Deploy to TestFlight
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
      
      - name: Install dependencies
        run: |
          gem install bundler
          bundle install
          gem install xcpretty
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.2'
      
      - name: Check for Firebase configuration
        run: |
          # Check if GoogleService-Info.plist exists
          if [ ! -f "WomenBusinessDirectory/GoogleService-Info.plist" ]; then
            echo "Warning: GoogleService-Info.plist not found. Firebase functionality may not work in tests."
            # For CI, we can create a dummy file if needed
            echo "Creating dummy GoogleService-Info.plist for CI"
            echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>API_KEY</key><string>dummy_api_key</string><key>GCM_SENDER_ID</key><string>dummy_sender_id</string><key>PLIST_VERSION</key><string>1</string><key>BUNDLE_ID</key><string>com.example.WomenBusinessDirectory</string><key>PROJECT_ID</key><string>dummy-project-id</string><key>STORAGE_BUCKET</key><string>dummy-bucket.appspot.com</string><key>IS_ADS_ENABLED</key><false></false><key>IS_ANALYTICS_ENABLED</key><false></false><key>IS_APPINVITE_ENABLED</key><true></true><key>IS_GCM_ENABLED</key><true></true><key>IS_SIGNIN_ENABLED</key><true></true><key>GOOGLE_APP_ID</key><string>1:123456789012:ios:1234567890abcdef</string></dict></plist>' > WomenBusinessDirectory/GoogleService-Info.plist
          fi
      
      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.jamilaruzimetova.WomenBusinessDirectory</key>
                  <string>match AppStore com.jamilaruzimetova.WomenBusinessDirectory</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>${{ secrets.TEAM_ID }}</string>
          </dict>
          </plist>
          EOF
      
      - name: Setup Provisioning Profiles
        env:
          APPLE_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64 }}
          APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          echo -n "$APPLE_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          security import $CERTIFICATE_PATH -P "$APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          PROFILE_PATH=$RUNNER_TEMP/profile.mobileprovision
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $PROFILE_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/
      
      - name: Set up App Store Connect API
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          # Create App Store Connect API key file
          mkdir -p ~/.appstoreconnect/private_keys/
          echo "$APP_STORE_CONNECT_API_KEY_CONTENT" > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
      
      - name: Try Alternative Build Approach
        run: |
          # Try a different approach using fastlane directly
          echo "app_identifier(\"com.jamilaruzimetova.WomenBusinessDirectory\")" > fastlane/Appfile
          echo "apple_id(\"${{ secrets.APPLE_ID }}\")" >> fastlane/Appfile
          echo "team_id(\"${{ secrets.TEAM_ID }}\")" >> fastlane/Appfile
          
          mkdir -p fastlane
          cat > fastlane/Fastfile << 'EOF'
          default_platform(:ios)
          
          platform :ios do
            desc "Build and upload to TestFlight"
            lane :beta do
              build_app(
                project: "WomenBusinessDirectory.xcodeproj",
                scheme: "WomenBusinessDirectory",
                clean: true,
                output_directory: "./build",
                output_name: "WomenBusinessDirectory.ipa",
                export_method: "app-store",
                export_options: {
                  provisioningProfiles: { 
                    "com.jamilaruzimetova.WomenBusinessDirectory" => "match AppStore com.jamilaruzimetova.WomenBusinessDirectory"
                  },
                  signingCertificate: "Apple Distribution",
                  signingStyle: "manual",
                  teamID: ENV["TEAM_ID"]
                },
                skip_profile_detection: true,
                skip_package_dependencies_resolution: true,
                disable_package_automatic_updates: true,
                xcargs: "COMPILER_INDEX_STORE_ENABLE=NO IDEPackageSupportUseBuiltinSCM=YES DISABLE_FILE_SYSTEM_SYNCHRONIZATION=1"
              )
              
              upload_to_testflight(
                api_key_path: "~/.appstoreconnect/private_keys/AuthKey_#{ENV['APP_STORE_CONNECT_API_KEY_ID']}.p8",
                api_key: {
                  key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
                  issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"]
                },
                skip_waiting_for_build_processing: true
              )
            end
          end
          EOF
      
      - name: Run Fastlane
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          FASTLANE_DISABLE_COLORS: 1
          FASTLANE_SKIP_UPDATE_CHECK: 1
          DISABLE_FILE_SYSTEM_SYNCHRONIZATION: 1
          DISABLE_XCODE_PROJECT_VALIDATION: 1
        run: |
          # Run fastlane with environment variables
          bundle exec fastlane beta