name: iOS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.3'
    
    - name: Check for Firebase configuration
      run: |
        # Check if GoogleService-Info.plist exists
        if [ ! -f "WomenBusinessDirectory/GoogleService-Info.plist" ]; then
          echo "Warning: GoogleService-Info.plist not found. Firebase functionality may not work in tests."
          # For CI, we can create a dummy file if needed
          echo "Creating dummy GoogleService-Info.plist for CI"
          echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>API_KEY</key><string>dummy_api_key</string><key>GCM_SENDER_ID</key><string>dummy_sender_id</string><key>PLIST_VERSION</key><string>1</string><key>BUNDLE_ID</key><string>com.example.WomenBusinessDirectory</string><key>PROJECT_ID</key><string>dummy-project-id</string><key>STORAGE_BUCKET</key><string>dummy-bucket.appspot.com</string><key>IS_ADS_ENABLED</key><false></false><key>IS_ANALYTICS_ENABLED</key><false></false><key>IS_APPINVITE_ENABLED</key><true></true><key>IS_GCM_ENABLED</key><true></true><key>IS_SIGNIN_ENABLED</key><true></true><key>GOOGLE_APP_ID</key><string>1:123456789012:ios:1234567890abcdef</string></dict></plist>' > WomenBusinessDirectory/GoogleService-Info.plist
        fi
    
    - name: Resolve Swift Package Manager dependencies
      run: |
        xcodebuild -resolvePackageDependencies -project WomenBusinessDirectory.xcodeproj
    
    - name: Build and test
      run: |
        xcodebuild clean test -project WomenBusinessDirectory.xcodeproj -scheme WomenBusinessDirectory -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.4' -allowProvisioningUpdates
        
  # This job will be enabled when you're ready to deploy to TestFlight
  # Uncomment and configure when needed
  # deploy-to-testflight:
  #   name: Deploy to TestFlight
  #   needs: build-and-test
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: macos-latest
  #   
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3
  #     
  #   - name: Set up Xcode
  #     uses: maxim-lobanov/setup-xcode@v1
  #     with:
  #       xcode-version: '15.3'
  #   
  #   - name: Install Apple certificate and provisioning profile
  #     env:
  #       BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #       P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #       BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  #       KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #     run: |
  #       # Create temporary keychain
  #       KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  #       security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #       security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #       security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #       
  #       # Import certificate to keychain
  #       echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $RUNNER_TEMP/build_certificate.p12
  #       security import $RUNNER_TEMP/build_certificate.p12 -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #       security list-keychain -d user -s $KEYCHAIN_PATH
  #       
  #       # Apply provisioning profile
  #       mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #       echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
  #   
  #   - name: Resolve Swift Package Manager dependencies
  #     run: |
  #       xcodebuild -resolvePackageDependencies -project WomenBusinessDirectory.xcodeproj
  #   
  #   - name: Build app for distribution
  #     run: |
  #       xcodebuild clean archive -project WomenBusinessDirectory.xcodeproj -scheme WomenBusinessDirectory -configuration Release -archivePath $RUNNER_TEMP/WomenBusinessDirectory.xcarchive -allowProvisioningUpdates
  #       xcodebuild -exportArchive -archivePath $RUNNER_TEMP/WomenBusinessDirectory.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $RUNNER_TEMP/build
  #   
  #   - name: Upload to TestFlight
  #     env:
  #       APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
  #       APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
  #       APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
  #     run: |
  #       # Set up App Store Connect API key
  #       mkdir -p ~/.appstoreconnect/private_keys
  #       echo -n "$APP_STORE_CONNECT_API_KEY_CONTENT" > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
  #       
  #       # Upload to TestFlight
  #       xcrun altool --upload-app --type ios --file $RUNNER_TEMP/build/WomenBusinessDirectory.ipa --apiKey $APP_STORE_CONNECT_API_KEY_ID --apiIssuer $APP_STORE_CONNECT_API_ISSUER_ID