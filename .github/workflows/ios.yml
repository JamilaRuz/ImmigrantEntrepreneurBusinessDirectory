name: iOS CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-testflight:
    name: Build and Deploy to TestFlight
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
      
      - name: Install dependencies
        run: |
          gem install bundler
          bundle install
          gem install xcpretty
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.1'
      
      - name: Check for Firebase configuration
        run: |
          # Check if GoogleService-Info.plist exists
          if [ ! -f "WomenBusinessDirectory/GoogleService-Info.plist" ]; then
            echo "Warning: GoogleService-Info.plist not found. Firebase functionality may not work in tests."
            # For CI, we can create a dummy file if needed
            echo "Creating dummy GoogleService-Info.plist for CI"
            echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>API_KEY</key><string>dummy_api_key</string><key>GCM_SENDER_ID</key><string>dummy_sender_id</string><key>PLIST_VERSION</key><string>1</string><key>BUNDLE_ID</key><string>com.example.WomenBusinessDirectory</string><key>PROJECT_ID</key><string>dummy-project-id</string><key>STORAGE_BUCKET</key><string>dummy-bucket.appspot.com</string><key>IS_ADS_ENABLED</key><false></false><key>IS_ANALYTICS_ENABLED</key><false></false><key>IS_APPINVITE_ENABLED</key><true></true><key>IS_GCM_ENABLED</key><true></true><key>IS_SIGNIN_ENABLED</key><true></true><key>GOOGLE_APP_ID</key><string>1:123456789012:ios:1234567890abcdef</string></dict></plist>' > WomenBusinessDirectory/GoogleService-Info.plist
          fi
      
      - name: Create ExportOptions.plist
        run: |
          cat > ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.jamilaruzimetova.WomenBusinessDirectory</key>
                  <string>match AppStore com.jamilaruzimetova.WomenBusinessDirectory</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>${{ secrets.TEAM_ID }}</string>
          </dict>
          </plist>
          EOF
      
      - name: Setup Provisioning Profiles
        env:
          APPLE_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_BASE64 }}
          APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create a temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          echo -n "$APPLE_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          security import $CERTIFICATE_PATH -P "$APPLE_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          PROFILE_PATH=$RUNNER_TEMP/profile.mobileprovision
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $PROFILE_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # List provisioning profiles to verify
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
      
      - name: Set up App Store Connect API
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          # Create App Store Connect API key file with proper permissions
          mkdir -p ~/.appstoreconnect/private_keys/
          echo -n "$APP_STORE_CONNECT_API_KEY_CONTENT" > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          chmod 600 ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          
          # Verify the key file exists and has content
          ls -la ~/.appstoreconnect/private_keys/
          if [ -s ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8 ]; then
            echo "API key file created successfully"
          else
            echo "API key file is empty or not created properly"
            exit 1
          fi
      
      - name: Fix Xcode Project
        run: |
          # Try to fix the Xcode project by recreating it
          echo "Attempting to fix Xcode project..."
          
          # Create a backup of the original project
          cp -R WomenBusinessDirectory.xcodeproj WomenBusinessDirectory.xcodeproj.bak
          
          # Create a simple Swift package
          mkdir -p BuildTools
          cat > BuildTools/Package.swift << 'EOF'
          // swift-tools-version:5.3
          import PackageDescription

          let package = Package(
              name: "BuildTools",
              platforms: [.macOS(.v10_15)],
              dependencies: [],
              targets: []
          )
          EOF
          
          # Create a simple Fastfile for upload only
          mkdir -p fastlane
          cat > fastlane/Fastfile << 'EOF'
          default_platform(:ios)
          
          platform :ios do
            desc "Upload to TestFlight"
            lane :upload do
              api_key = app_store_connect_api_key(
                key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
                issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
                key_filepath: "~/.appstoreconnect/private_keys/AuthKey_#{ENV['APP_STORE_CONNECT_API_KEY_ID']}.p8",
                duration: 1200,
                in_house: false
              )
              
              upload_to_testflight(
                api_key: api_key,
                ipa: "./build/WomenBusinessDirectory.ipa",
                skip_waiting_for_build_processing: true
              )
            end
          end
          EOF
      
      - name: List project structure
        run: |
          echo "Project structure:"
          ls -la
          echo "Xcode project contents:"
          ls -la WomenBusinessDirectory.xcodeproj || true
          echo "App directory contents:"
          ls -la WomenBusinessDirectory || true
      
      - name: Build with xcodebuild
        env:
          DEVELOPER_DIR: /Applications/Xcode_15.1.app/Contents/Developer
        run: |
          # Create build directory
          mkdir -p build
          
          # List available schemes
          echo "Available schemes:"
          xcodebuild -list -project WomenBusinessDirectory.xcodeproj || true
          
          # Try building with workspace if it exists
          if [ -f "WomenBusinessDirectory.xcworkspace/contents.xcworkspacedata" ]; then
            echo "Building with workspace..."
            xcodebuild clean archive \
              -workspace WomenBusinessDirectory.xcworkspace \
              -scheme WomenBusinessDirectory \
              -configuration Release \
              -sdk iphoneos \
              -archivePath ./build/WomenBusinessDirectory.xcarchive \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              CODE_SIGN_STYLE=Manual \
              PROVISIONING_PROFILE_SPECIFIER="match AppStore com.jamilaruzimetova.WomenBusinessDirectory" \
              DEVELOPMENT_TEAM="${{ secrets.TEAM_ID }}" \
              PRODUCT_BUNDLE_IDENTIFIER="com.jamilaruzimetova.WomenBusinessDirectory" \
              MARKETING_VERSION="1.0.0" \
              CURRENT_PROJECT_VERSION="1" \
              OTHER_LDFLAGS="-ObjC" \
              COMPILER_INDEX_STORE_ENABLE=NO \
              IDEPackageSupportUseBuiltinSCM=YES \
              DISABLE_FILE_SYSTEM_SYNCHRONIZATION=1 \
              || echo "Workspace build failed, trying project build"
          else
            echo "No workspace found, building with project..."
          fi
          
          # Try building with project if workspace build failed or doesn't exist
          if [ ! -d "./build/WomenBusinessDirectory.xcarchive" ]; then
            echo "Building with project..."
            xcodebuild clean archive \
              -project WomenBusinessDirectory.xcodeproj \
              -scheme WomenBusinessDirectory \
              -configuration Release \
              -sdk iphoneos \
              -archivePath ./build/WomenBusinessDirectory.xcarchive \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              CODE_SIGN_STYLE=Manual \
              PROVISIONING_PROFILE_SPECIFIER="match AppStore com.jamilaruzimetova.WomenBusinessDirectory" \
              DEVELOPMENT_TEAM="${{ secrets.TEAM_ID }}" \
              PRODUCT_BUNDLE_IDENTIFIER="com.jamilaruzimetova.WomenBusinessDirectory" \
              MARKETING_VERSION="1.0.0" \
              CURRENT_PROJECT_VERSION="1" \
              OTHER_LDFLAGS="-ObjC" \
              COMPILER_INDEX_STORE_ENABLE=NO \
              IDEPackageSupportUseBuiltinSCM=YES \
              DISABLE_FILE_SYSTEM_SYNCHRONIZATION=1 \
              || echo "Project build failed, trying fallback build"
          fi
          
          # Check if archive was created
          if [ -d "./build/WomenBusinessDirectory.xcarchive" ]; then
            echo "Archive created successfully, exporting IPA..."
            
            # Export the archive to IPA
            xcodebuild -exportArchive \
              -archivePath ./build/WomenBusinessDirectory.xcarchive \
              -exportOptionsPlist ExportOptions.plist \
              -exportPath ./build \
              || echo "Export failed, trying manual IPA creation"
              
            # Check if IPA was created
            if [ -f "./build/WomenBusinessDirectory.ipa" ]; then
              echo "IPA created successfully"
            else
              echo "IPA not created by export, trying manual creation..."
              
              # Try to manually create IPA from archive
              cd ./build/WomenBusinessDirectory.xcarchive/Products/Applications/
              mkdir -p Payload
              cp -R *.app Payload/
              zip -r ../../../../build/WomenBusinessDirectory.ipa Payload
              cd ../../../../
              
              if [ -f "./build/WomenBusinessDirectory.ipa" ]; then
                echo "IPA created manually"
              else
                echo "Failed to create IPA"
              fi
            fi
          else
            echo "Archive not created, build failed"
          fi
          
          # List build directory contents
          echo "Build directory contents:"
          ls -la ./build || true
      
      - name: Upload to TestFlight
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          FASTLANE_DISABLE_COLORS: 1
          FASTLANE_SKIP_UPDATE_CHECK: 1
        run: |
          # Check if IPA exists
          if [ -f "./build/WomenBusinessDirectory.ipa" ]; then
            echo "IPA file found, uploading to TestFlight..."
            
            # Verify API key file again
            ls -la ~/.appstoreconnect/private_keys/
            
            # Try uploading with Fastlane
            bundle exec fastlane upload || FASTLANE_FAILED=1
            
            # If Fastlane fails, try altool
            if [ "$FASTLANE_FAILED" = "1" ]; then
              echo "Trying direct upload with altool..."
              
              # Use direct command line arguments instead of a JSON file
              xcrun altool --upload-app \
                --type ios \
                --file ./build/WomenBusinessDirectory.ipa \
                --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
                --apiIssuer "$APP_STORE_CONNECT_API_KEY_ISSUER_ID" \
                || echo "Upload failed with altool"
            fi
          else
            echo "IPA file not found. Build process failed to create an IPA file."
            echo "Checking for archive..."
            
            if [ -d "./build/WomenBusinessDirectory.xcarchive" ]; then
              echo "Archive exists but IPA creation failed."
              echo "Archive contents:"
              ls -la ./build/WomenBusinessDirectory.xcarchive || true
            else
              echo "Archive does not exist. Build process failed completely."
            fi
            
            echo "Failed to build and upload the app to TestFlight."
            echo "Please check the logs for more information."
            exit 1
          fi